<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.js?1.29.1"></script>
    <style type="text/css">

html, body, #map {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

.stations, .stations svg {
  position: absolute;
}

.stations svg {
  width: 60px;
  height: 20px;
  padding-right: 100px;
  font: 10px sans-serif;
}

.stations circle {
  fill: brown;
  stroke: black;
  /*stroke-width: .4px;*/
}

    </style>
  </head>
  <body>
    <div id="map"></div>
    <script type="text/javascript">

colors = ['#ffffcc','#ffeda0','#fed976','#feb24c','#fd8d3c','#fc4e2a','#e31a1c','#bd0026','#800026']

// Create the Google Map…
var map = new google.maps.Map(d3.select("#map").node(), {
  zoom: 22,
  center: new google.maps.LatLng(33.4500, -112.0667),
  mapTypeId: google.maps.MapTypeId.TERRAIN
});

// Load the station data. When the data comes back, create an overlay.
d3.json("predictions.json", function(data) {

  // console.log(data)
  // data.forEach(function(e){console.log(e);});
  var overlay = new google.maps.OverlayView();

  // Add the container when the overlay is added to the map.
  overlay.onAdd = function() {
    var layer = d3.select(this.getPanes().overlayLayer).append("div")
        .attr("class", "stations");

    // Draw each marker as a separate SVG element.
    // We could use a single SVG, but what size would it have?
    overlay.draw = function() {
      var projection = this.getProjection(),
          padding = 10;

      var marker = layer.selectAll("svg")
          .data(d3.entries(data))
          .each(transform) // update existing markers
        .enter().append("svg:svg")
          .each(transform)
          .attr("class", "marker");
<<<<<<< HEAD:part2/html/vis.html
/*
      marker.append("svg:circle")
          .attr("r", function(d) {return 2*Math.max(d.value[2],d.value[3]);})
          .attr("cx", padding)
          .attr("cy", padding);
*/
      // Add a circle.
      marker.append("svg:circle")
          .attr("r", function(d) {return 2*Math.min(d.value[2],d.value[3]);})
          .attr("cx", padding)
          .attr("cy", padding)
          .style("stroke-width", function(d) {return 2*Math.abs(d.value[2]-d.value[3]);})
          .append("title") //adds the hovering effect
            .text("hello");//function(d){ return d.screen_name; });


/*     marker.selectAll("circle")
      .append("title")
      .text(function(d) { return d.key; });*/

      // Add a label.
      // marker.append("svg:text")
      //     .attr("x", padding + 7)
      //     .attr("y", padding)
      //     .attr("dy", ".31em")
          // .append("title", function(d) { return d.key; });
=======

      for(var key in data){
        // var dif = Math.abs(data[key][2]-data[key][3])
        var col = Math.round(3*Math.abs(data[key][2]-data[key][3]))
        col = Math.min(8,col);
        // console.log(dif)
        new google.maps.Marker({
          position: new google.maps.LatLng(data[key][0], data[key][1]),
          icon: {
            path: google.maps.SymbolPath.CIRCLE,
            scale: 1.5*data[key][2]-0.5,
            strokeColor : colors[8-col],
          },
          map: map,
          title: key+'\nrating: '+data[key][2]+'\npredicted: '+data[key][3]
      });
      }
>>>>>>> 0d1d8f2a3d8fc6cc49a0f9ca639440f839c683c0:part2/web_writeup/templates/vis.html

      function transform(d) {
        // console.log(d)
        d = new google.maps.LatLng(d.value[0], d.value[1]);
        d = projection.fromLatLngToDivPixel(d);
        return d3.select(this)
            .style("left", (d.x - padding) + "px")
            .style("top", (d.y - padding) + "px");
      }
    };
  };

  // Bind our overlay to the map…
  overlay.setMap(map);
});

    </script>
  </body>
</html>